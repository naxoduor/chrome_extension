{"ast":null,"code":"/*global chrome*/import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AdminMessages=()=>{const[messages,setMessages]=useState([]);const[loading,setLoading]=useState(true);const fetchStorageData=()=>{chrome.storage.sync.get(['adminMessages'],result=>{setMessages(result.adminMessages||'No data');});};useEffect(()=>{try{fetchStorageData();}finally{setLoading(false);}// Fetch messages from Chrome storage or an external source\nconst handleStorageChange=(changes,areaName)=>{if(changes.key){setMessages(changes.key.newValue);}};chrome.storage.onChanged.addListener(handleStorageChange);},[]);if(loading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Admin Messages\"}),/*#__PURE__*/_jsx(\"ul\",{children:messages.length>0?messages.map((msg,index)=>/*#__PURE__*/_jsx(\"li\",{children:msg.content},index)):/*#__PURE__*/_jsx(\"li\",{children:\"No new messages\"})})]});};export default AdminMessages;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","AdminMessages","messages","setMessages","loading","setLoading","fetchStorageData","chrome","storage","sync","get","result","adminMessages","handleStorageChange","changes","areaName","key","newValue","onChanged","addListener","children","length","map","msg","index","content"],"sources":["/home/nax/Documents/react-chrome-app/popup/src/AdminMessages.js"],"sourcesContent":["    /*global chrome*/\n\nimport React, { useState, useEffect } from 'react';\n\nconst AdminMessages = () => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true)\n\n  const fetchStorageData = () => {\n    chrome.storage.sync.get(['adminMessages'], (result) => {\n      setMessages(result.adminMessages || 'No data');\n    });\n  };\n\n\n  useEffect(() => {\n    try{\n      fetchStorageData();\n    }\n    finally{\n      setLoading(false)\n    }\n\n    // Fetch messages from Chrome storage or an external source\n    const handleStorageChange = (changes, areaName) => {\n      if (changes.key) {\n        setMessages(changes.key.newValue);\n      }\n    };\n\n    chrome.storage.onChanged.addListener(handleStorageChange);\n\n   \n  }, []\n);\n\nif (loading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h3>Admin Messages</h3>\n      <ul>\n        {messages.length > 0 ? (\n          messages.map((msg, index) => <li key={index}>{msg.content}</li>)\n        ) : (\n          <li>No new messages</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default AdminMessages;\n"],"mappings":"AAAI,iBAEJ,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAE5C,KAAM,CAAAW,gBAAgB,CAAGA,CAAA,GAAM,CAC7BC,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,eAAe,CAAC,CAAGC,MAAM,EAAK,CACrDR,WAAW,CAACQ,MAAM,CAACC,aAAa,EAAI,SAAS,CAAC,CAChD,CAAC,CAAC,CACJ,CAAC,CAGDhB,SAAS,CAAC,IAAM,CACd,GAAG,CACDU,gBAAgB,CAAC,CAAC,CACpB,CAAC,OACM,CACLD,UAAU,CAAC,KAAK,CAAC,CACnB,CAEA;AACA,KAAM,CAAAQ,mBAAmB,CAAGA,CAACC,OAAO,CAAEC,QAAQ,GAAK,CACjD,GAAID,OAAO,CAACE,GAAG,CAAE,CACfb,WAAW,CAACW,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,CACnC,CACF,CAAC,CAEDV,MAAM,CAACC,OAAO,CAACU,SAAS,CAACC,WAAW,CAACN,mBAAmB,CAAC,CAG3D,CAAC,CAAE,EACL,CAAC,CAED,GAAIT,OAAO,CAAE,mBAAON,IAAA,QAAAsB,QAAA,CAAK,YAAU,CAAK,CAAC,CAEvC,mBACEpB,KAAA,QAAAoB,QAAA,eACEtB,IAAA,OAAAsB,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvBtB,IAAA,OAAAsB,QAAA,CACGlB,QAAQ,CAACmB,MAAM,CAAG,CAAC,CAClBnB,QAAQ,CAACoB,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBAAK1B,IAAA,OAAAsB,QAAA,CAAiBG,GAAG,CAACE,OAAO,EAAnBD,KAAwB,CAAC,CAAC,cAEhE1B,IAAA,OAAAsB,QAAA,CAAI,iBAAe,CAAI,CACxB,CACC,CAAC,EACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAAnB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}