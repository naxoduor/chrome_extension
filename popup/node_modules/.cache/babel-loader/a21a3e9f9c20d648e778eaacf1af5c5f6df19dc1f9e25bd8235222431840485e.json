{"ast":null,"code":"/*global chrome*/import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AdminMessages=()=>{//   const [messages, setMessages] = useState([]);\n//   useEffect(async() => {\n//     chrome.storage.local.get(['adminMessages'], (result) => {\n//      const response = await JSON.parse(result.adminMessages)\n//      setMessages(response)\n//   })\n//   }, []\n// );\nconst[data,setData]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const fetchData=async()=>{try{const result=await chrome.storage.local.get(['adminMessages']);console.log(\"fetch the bamn data\");// const result = await response.json();\nsetData(JSON.parse(result.adminMessages));}catch(error){console.error('Error fetching data:',error);}finally{setLoading(false);}};fetchData();},[]);// Empty dependency array to run the effect only once\nif(loading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});return/*#__PURE__*/_jsxs(\"div\",{children:[\"Data: \",data]});// return (\n//   <div>\n//     <h3>Admin Messages</h3>\n//     <ul>\n//       {messages.length > 0 ? (\n//         messages.map((msg, index) => <li key={index}>ONE</li>)\n//       ) : (\n//         <li>No new messages</li>\n//       )}\n//     </ul>\n//   </div>\n// );\n};export default AdminMessages;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","AdminMessages","data","setData","loading","setLoading","fetchData","result","chrome","storage","local","get","console","log","JSON","parse","adminMessages","error","children"],"sources":["/home/nax/chrome-extension/react-chrome-app/popup/src/AdminMessages.js"],"sourcesContent":["    /*global chrome*/\n\nimport React, { useState, useEffect } from 'react';\n\nconst AdminMessages = () => {\n//   const [messages, setMessages] = useState([]);\n\n//   useEffect(async() => {\n//     chrome.storage.local.get(['adminMessages'], (result) => {\n//      const response = await JSON.parse(result.adminMessages)\n//      setMessages(response)\n//   })\n//   }, []\n// );\n\n\n\nconst [data, setData] = useState(null);\nconst [loading, setLoading] = useState(true);\n\nuseEffect(() => {\n  const fetchData = async () => {\n    try {\n      const result = await chrome.storage.local.get(['adminMessages'])\n      console.log(\"fetch the bamn data\")\n      // const result = await response.json();\n      setData(JSON.parse(result.adminMessages));\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  fetchData();\n}, []); // Empty dependency array to run the effect only once\n\nif (loading) return <div>Loading...</div>;\nreturn <div>Data: {data}</div>;\n\n\n  // return (\n  //   <div>\n  //     <h3>Admin Messages</h3>\n  //     <ul>\n  //       {messages.length > 0 ? (\n  //         messages.map((msg, index) => <li key={index}>ONE</li>)\n  //       ) : (\n  //         <li>No new messages</li>\n  //       )}\n  //     </ul>\n  //   </div>\n  // );\n};\n\nexport default AdminMessages;\n"],"mappings":"AAAI,iBAEJ,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAU,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAC,MAAM,CAACC,OAAO,CAACC,KAAK,CAACC,GAAG,CAAC,CAAC,eAAe,CAAC,CAAC,CAChEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAClC;AACAV,OAAO,CAACW,IAAI,CAACC,KAAK,CAACR,MAAM,CAACS,aAAa,CAAC,CAAC,CAC3C,CAAE,MAAOC,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CAAC,OAAS,CACRZ,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,GAAIF,OAAO,CAAE,mBAAON,IAAA,QAAAoB,QAAA,CAAK,YAAU,CAAK,CAAC,CACzC,mBAAOlB,KAAA,QAAAkB,QAAA,EAAK,QAAM,CAAChB,IAAI,EAAM,CAAC,CAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,CAAC,CAED,cAAe,CAAAD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}