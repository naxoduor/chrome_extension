{"ast":null,"code":"/*global chrome*/// import React, { useState, useEffect } from 'react';\n// const AdminMessages = () => {\n//   const [messages, setMessages] = useState(null);\n//   useEffect(() => {\n//     // chrome.storage.local.get(['adminMessages'], (result) => {\n//     //  const response = await JSON.parse(result.adminMessages)\n//      setMessages(\"message\")\n//   // })\n//   }, []\n// );\n// const [data, setData] = useState(null);\n// const [loading, setLoading] = useState(true);\n// useEffect(() => {\n//   const fetchData = async () => {\n// try {\n// const result = await chrome.storage.sync.get(['adminMessages'])\n// console.log(\"fetch the bamn data\")\n// const result = await response.json();\n// setData(JSON.parse(result.adminMessages));\n// setData([\"Data\"])\n// } catch (error) {\n// console.error('Error fetching data:', error);\n// } finally {\n// setLoading(false);\n//     }\n//   };\n//   fetchData();\n// }, []); \n// if (loading) return <div>Loading...</div>;\n// return <div>Data: {data}</div>;\n//   return (\n//     <div>\n//       <h3>Admin Messages</h3>\n//       <ul>\n//         {messages.length > 0 ? (\n//           messages.map((msg, index) => <li key={index}>ONE</li>)\n//         ) : (\n//           <li>No new messages</li>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n// export default AdminMessages;\nimport React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AdminMessages=()=>{const[messages,setMessages]=useState([]);useEffect(()=>{// Fetch messages from Chrome storage or an external source\nchrome.storage.onChanged.addListener((changes,namespace)=>{chrome.storage.sync.get(['adminMessages'],result=>{console.log(\"print message\");if(result.adminMessages){setMessages(result.adminMessages);}});});},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Admin Messages\"}),/*#__PURE__*/_jsx(\"ul\",{children:messages.length>0?messages.map((msg,index)=>/*#__PURE__*/_jsx(\"li\",{children:msg},index)):/*#__PURE__*/_jsx(\"li\",{children:\"No new messages\"})})]});};export default AdminMessages;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","AdminMessages","messages","setMessages","chrome","storage","onChanged","addListener","changes","namespace","sync","get","result","console","log","adminMessages","children","length","map","msg","index"],"sources":["/home/nax/chrome-extension/react-chrome-app/popup/src/AdminMessages.js"],"sourcesContent":["    /*global chrome*/\n\n// import React, { useState, useEffect } from 'react';\n\n// const AdminMessages = () => {\n//   const [messages, setMessages] = useState(null);\n\n//   useEffect(() => {\n//     // chrome.storage.local.get(['adminMessages'], (result) => {\n//     //  const response = await JSON.parse(result.adminMessages)\n//      setMessages(\"message\")\n//   // })\n//   }, []\n// );\n\n\n// const [data, setData] = useState(null);\n// const [loading, setLoading] = useState(true);\n\n// useEffect(() => {\n//   const fetchData = async () => {\n    // try {\n      // const result = await chrome.storage.sync.get(['adminMessages'])\n      // console.log(\"fetch the bamn data\")\n      // const result = await response.json();\n      // setData(JSON.parse(result.adminMessages));\n      // setData([\"Data\"])\n    // } catch (error) {\n      // console.error('Error fetching data:', error);\n    // } finally {\n      // setLoading(false);\n//     }\n//   };\n\n//   fetchData();\n// }, []); \n\n// if (loading) return <div>Loading...</div>;\n// return <div>Data: {data}</div>;\n\n//   return (\n//     <div>\n//       <h3>Admin Messages</h3>\n//       <ul>\n//         {messages.length > 0 ? (\n//           messages.map((msg, index) => <li key={index}>ONE</li>)\n//         ) : (\n//           <li>No new messages</li>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default AdminMessages;\n\n\nimport React, { useState, useEffect } from 'react';\n\nconst AdminMessages = () => {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    // Fetch messages from Chrome storage or an external source\n    chrome.storage.onChanged.addListener((changes, namespace) => {\n      chrome.storage.sync.get(['adminMessages'], (result) => {\n        console.log(\"print message\")\n        if (result.adminMessages) {\n          setMessages(result.adminMessages);\n        }\n      });\n    })\n   \n  }, []\n);\n\n  return (\n    <div>\n      <h3>Admin Messages</h3>\n      <ul>\n        {messages.length > 0 ? (\n          messages.map((msg, index) => <li key={index}>{msg}</li>)\n        ) : (\n          <li>No new messages</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default AdminMessages;\n"],"mappings":"AAAI,iBAEJ;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACI;AACE;AACA;AACA;AACA;AACA;AACF;AACE;AACF;AACE;AACN;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd;AACAQ,MAAM,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW,CAAC,CAACC,OAAO,CAAEC,SAAS,GAAK,CAC3DL,MAAM,CAACC,OAAO,CAACK,IAAI,CAACC,GAAG,CAAC,CAAC,eAAe,CAAC,CAAGC,MAAM,EAAK,CACrDC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAC5B,GAAIF,MAAM,CAACG,aAAa,CAAE,CACxBZ,WAAW,CAACS,MAAM,CAACG,aAAa,CAAC,CACnC,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CAEJ,CAAC,CAAE,EACL,CAAC,CAEC,mBACEf,KAAA,QAAAgB,QAAA,eACElB,IAAA,OAAAkB,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvBlB,IAAA,OAAAkB,QAAA,CACGd,QAAQ,CAACe,MAAM,CAAG,CAAC,CAClBf,QAAQ,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBAAKtB,IAAA,OAAAkB,QAAA,CAAiBG,GAAG,EAAXC,KAAgB,CAAC,CAAC,cAExDtB,IAAA,OAAAkB,QAAA,CAAI,iBAAe,CAAI,CACxB,CACC,CAAC,EACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAAf,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}